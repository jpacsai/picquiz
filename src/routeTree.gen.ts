/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as AppRouteImport } from './routes/_app'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AppHomeRouteImport } from './routes/_app/home'
import { Route as AppAdminRouteImport } from './routes/_app/admin'
import { Route as AppQuizIndexRouteImport } from './routes/_app/quiz/index'
import { Route as AppTopicIdIndexRouteImport } from './routes/_app/$topicId/index'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AppRoute = AppRouteImport.update({
  id: '/_app',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AppHomeRoute = AppHomeRouteImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => AppRoute,
} as any)
const AppAdminRoute = AppAdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => AppRoute,
} as any)
const AppQuizIndexRoute = AppQuizIndexRouteImport.update({
  id: '/quiz/',
  path: '/quiz/',
  getParentRoute: () => AppRoute,
} as any)
const AppTopicIdIndexRoute = AppTopicIdIndexRouteImport.update({
  id: '/$topicId/',
  path: '/$topicId/',
  getParentRoute: () => AppRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/admin': typeof AppAdminRoute
  '/home': typeof AppHomeRoute
  '/$topicId': typeof AppTopicIdIndexRoute
  '/quiz': typeof AppQuizIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/admin': typeof AppAdminRoute
  '/home': typeof AppHomeRoute
  '/$topicId': typeof AppTopicIdIndexRoute
  '/quiz': typeof AppQuizIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_app': typeof AppRouteWithChildren
  '/login': typeof LoginRoute
  '/_app/admin': typeof AppAdminRoute
  '/_app/home': typeof AppHomeRoute
  '/_app/$topicId/': typeof AppTopicIdIndexRoute
  '/_app/quiz/': typeof AppQuizIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/login' | '/admin' | '/home' | '/$topicId' | '/quiz'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/login' | '/admin' | '/home' | '/$topicId' | '/quiz'
  id:
    | '__root__'
    | '/'
    | '/_app'
    | '/login'
    | '/_app/admin'
    | '/_app/home'
    | '/_app/$topicId/'
    | '/_app/quiz/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppRoute: typeof AppRouteWithChildren
  LoginRoute: typeof LoginRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_app/home': {
      id: '/_app/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof AppHomeRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/admin': {
      id: '/_app/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AppAdminRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/quiz/': {
      id: '/_app/quiz/'
      path: '/quiz'
      fullPath: '/quiz'
      preLoaderRoute: typeof AppQuizIndexRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/$topicId/': {
      id: '/_app/$topicId/'
      path: '/$topicId'
      fullPath: '/$topicId'
      preLoaderRoute: typeof AppTopicIdIndexRouteImport
      parentRoute: typeof AppRoute
    }
  }
}

interface AppRouteChildren {
  AppAdminRoute: typeof AppAdminRoute
  AppHomeRoute: typeof AppHomeRoute
  AppTopicIdIndexRoute: typeof AppTopicIdIndexRoute
  AppQuizIndexRoute: typeof AppQuizIndexRoute
}

const AppRouteChildren: AppRouteChildren = {
  AppAdminRoute: AppAdminRoute,
  AppHomeRoute: AppHomeRoute,
  AppTopicIdIndexRoute: AppTopicIdIndexRoute,
  AppQuizIndexRoute: AppQuizIndexRoute,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppRoute: AppRouteWithChildren,
  LoginRoute: LoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
